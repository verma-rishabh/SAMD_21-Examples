
dfll48m-initialization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000554  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00002554  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00002988  00010434  2**2
                  ALLOC
  3 .stack        00002004  20000474  000029c8  00010434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006955  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000575  00000000  00000000  00016e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000eb  00000000  00000000  0001737f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  0001746a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000174ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011974  00000000  00000000  0001753a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001554  00000000  00000000  00028eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000719fc  00000000  00000000  0002a402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000280  00000000  00000000  0009be00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	78 24 00 20 19 21 00 00 15 21 00 00 15 21 00 00     x$. .!...!...!..
	...
    202c:	15 21 00 00 00 00 00 00 00 00 00 00 15 21 00 00     .!...........!..
    203c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    204c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    205c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    206c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    207c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    208c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    209c:	15 21 00 00 15 21 00 00 15 21 00 00 15 21 00 00     .!...!...!...!..
    20ac:	15 21 00 00 00 00 00 00                             .!......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000434 	.word	0x20000434
    20d4:	00000000 	.word	0x00000000
    20d8:	00002554 	.word	0x00002554

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000438 	.word	0x20000438
    2108:	00002554 	.word	0x00002554
    210c:	00002554 	.word	0x00002554
    2110:	00000000 	.word	0x00000000

00002114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2114:	e7fe      	b.n	2114 <Dummy_Handler>
	...

00002118 <Reset_Handler>:
{
    2118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    211a:	4a2a      	ldr	r2, [pc, #168]	; (21c4 <Reset_Handler+0xac>)
    211c:	4b2a      	ldr	r3, [pc, #168]	; (21c8 <Reset_Handler+0xb0>)
    211e:	429a      	cmp	r2, r3
    2120:	d011      	beq.n	2146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2122:	001a      	movs	r2, r3
    2124:	4b29      	ldr	r3, [pc, #164]	; (21cc <Reset_Handler+0xb4>)
    2126:	429a      	cmp	r2, r3
    2128:	d20d      	bcs.n	2146 <Reset_Handler+0x2e>
    212a:	4a29      	ldr	r2, [pc, #164]	; (21d0 <Reset_Handler+0xb8>)
    212c:	3303      	adds	r3, #3
    212e:	1a9b      	subs	r3, r3, r2
    2130:	089b      	lsrs	r3, r3, #2
    2132:	3301      	adds	r3, #1
    2134:	009b      	lsls	r3, r3, #2
    2136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2138:	4823      	ldr	r0, [pc, #140]	; (21c8 <Reset_Handler+0xb0>)
    213a:	4922      	ldr	r1, [pc, #136]	; (21c4 <Reset_Handler+0xac>)
    213c:	588c      	ldr	r4, [r1, r2]
    213e:	5084      	str	r4, [r0, r2]
    2140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2142:	429a      	cmp	r2, r3
    2144:	d1fa      	bne.n	213c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2146:	4a23      	ldr	r2, [pc, #140]	; (21d4 <Reset_Handler+0xbc>)
    2148:	4b23      	ldr	r3, [pc, #140]	; (21d8 <Reset_Handler+0xc0>)
    214a:	429a      	cmp	r2, r3
    214c:	d20a      	bcs.n	2164 <Reset_Handler+0x4c>
    214e:	43d3      	mvns	r3, r2
    2150:	4921      	ldr	r1, [pc, #132]	; (21d8 <Reset_Handler+0xc0>)
    2152:	185b      	adds	r3, r3, r1
    2154:	2103      	movs	r1, #3
    2156:	438b      	bics	r3, r1
    2158:	3304      	adds	r3, #4
    215a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    215c:	2100      	movs	r1, #0
    215e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2160:	4293      	cmp	r3, r2
    2162:	d1fc      	bne.n	215e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2164:	4a1d      	ldr	r2, [pc, #116]	; (21dc <Reset_Handler+0xc4>)
    2166:	21ff      	movs	r1, #255	; 0xff
    2168:	4b1d      	ldr	r3, [pc, #116]	; (21e0 <Reset_Handler+0xc8>)
    216a:	438b      	bics	r3, r1
    216c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    216e:	39fd      	subs	r1, #253	; 0xfd
    2170:	2390      	movs	r3, #144	; 0x90
    2172:	005b      	lsls	r3, r3, #1
    2174:	4a1b      	ldr	r2, [pc, #108]	; (21e4 <Reset_Handler+0xcc>)
    2176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2178:	4a1b      	ldr	r2, [pc, #108]	; (21e8 <Reset_Handler+0xd0>)
    217a:	78d3      	ldrb	r3, [r2, #3]
    217c:	2503      	movs	r5, #3
    217e:	43ab      	bics	r3, r5
    2180:	2402      	movs	r4, #2
    2182:	4323      	orrs	r3, r4
    2184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2186:	78d3      	ldrb	r3, [r2, #3]
    2188:	270c      	movs	r7, #12
    218a:	43bb      	bics	r3, r7
    218c:	2608      	movs	r6, #8
    218e:	4333      	orrs	r3, r6
    2190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2192:	4b16      	ldr	r3, [pc, #88]	; (21ec <Reset_Handler+0xd4>)
    2194:	7b98      	ldrb	r0, [r3, #14]
    2196:	2230      	movs	r2, #48	; 0x30
    2198:	4390      	bics	r0, r2
    219a:	2220      	movs	r2, #32
    219c:	4310      	orrs	r0, r2
    219e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    21a0:	7b99      	ldrb	r1, [r3, #14]
    21a2:	43b9      	bics	r1, r7
    21a4:	4331      	orrs	r1, r6
    21a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    21a8:	7b9a      	ldrb	r2, [r3, #14]
    21aa:	43aa      	bics	r2, r5
    21ac:	4322      	orrs	r2, r4
    21ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    21b0:	4a0f      	ldr	r2, [pc, #60]	; (21f0 <Reset_Handler+0xd8>)
    21b2:	6853      	ldr	r3, [r2, #4]
    21b4:	2180      	movs	r1, #128	; 0x80
    21b6:	430b      	orrs	r3, r1
    21b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    21ba:	4b0e      	ldr	r3, [pc, #56]	; (21f4 <Reset_Handler+0xdc>)
    21bc:	4798      	blx	r3
        main();
    21be:	4b0e      	ldr	r3, [pc, #56]	; (21f8 <Reset_Handler+0xe0>)
    21c0:	4798      	blx	r3
    21c2:	e7fe      	b.n	21c2 <Reset_Handler+0xaa>
    21c4:	00002554 	.word	0x00002554
    21c8:	20000000 	.word	0x20000000
    21cc:	20000434 	.word	0x20000434
    21d0:	20000004 	.word	0x20000004
    21d4:	20000434 	.word	0x20000434
    21d8:	20000474 	.word	0x20000474
    21dc:	e000ed00 	.word	0xe000ed00
    21e0:	00002000 	.word	0x00002000
    21e4:	41007000 	.word	0x41007000
    21e8:	41005000 	.word	0x41005000
    21ec:	41004800 	.word	0x41004800
    21f0:	41004000 	.word	0x41004000
    21f4:	0000238d 	.word	0x0000238d
    21f8:	00002355 	.word	0x00002355

000021fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
    21fc:	4a01      	ldr	r2, [pc, #4]	; (2204 <SystemInit+0x8>)
    21fe:	4b02      	ldr	r3, [pc, #8]	; (2208 <SystemInit+0xc>)
    2200:	601a      	str	r2, [r3, #0]
        return;
}
    2202:	4770      	bx	lr
    2204:	000f4240 	.word	0x000f4240
    2208:	20000000 	.word	0x20000000

0000220c <ClocksInit>:

	/* ----------------------------------------------------------------------------------------------
	* 1) Set Flash wait states for 48 MHz (per Table 37-40 in data sheet)
	*/
	
	NVMCTRL->CTRLB.bit.RWS = 1;		/* 1 wait state required @ 3.3V & 48MHz */
    220c:	4a34      	ldr	r2, [pc, #208]	; (22e0 <ClocksInit+0xd4>)
    220e:	6853      	ldr	r3, [r2, #4]
    2210:	211e      	movs	r1, #30
    2212:	438b      	bics	r3, r1
    2214:	391c      	subs	r1, #28
    2216:	430b      	orrs	r3, r1
    2218:	6053      	str	r3, [r2, #4]
		.bit.AAMPEN = 0,		/* Disable automatic amplitude control */
		.bit.EN32K = 1,			/* 32kHz output is disabled */
		.bit.XTALEN = 1			/* Crystal connected to XIN32/XOUT32 */
	};
	// Write these settings
	SYSCTRL->XOSC32K.reg = sysctrl_xosc32k.reg;
    221a:	4b32      	ldr	r3, [pc, #200]	; (22e4 <ClocksInit+0xd8>)
    221c:	2283      	movs	r2, #131	; 0x83
    221e:	0092      	lsls	r2, r2, #2
    2220:	829a      	strh	r2, [r3, #20]
	// Enable the Oscillator - Separate step per data sheet recommendation (sec 17.6.3)
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
    2222:	8a9a      	ldrh	r2, [r3, #20]
    2224:	430a      	orrs	r2, r1
    2226:	829a      	strh	r2, [r3, #20]
	
	// Wait for XOSC32K to stabilize
	while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
    2228:	001a      	movs	r2, r3
    222a:	68d3      	ldr	r3, [r2, #12]
    222c:	079b      	lsls	r3, r3, #30
    222e:	d5fc      	bpl.n	222a <ClocksInit+0x1e>
	GCLK_GENDIV_Type gclk1_gendiv = {
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K	/* Apply division factor to Generator 1 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk1_gendiv.reg;
    2230:	4b2d      	ldr	r3, [pc, #180]	; (22e8 <ClocksInit+0xdc>)
    2232:	2202      	movs	r2, #2
    2234:	32ff      	adds	r2, #255	; 0xff
    2236:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 1 with XOSC32K as source
	GCLK_GENCTRL_Type gclk1_genctrl = {
    2238:	4a2c      	ldr	r2, [pc, #176]	; (22ec <ClocksInit+0xe0>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x05,		/* Generator source: XOSC32K output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K			/* Generator ID: 1 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk1_genctrl.reg;
    223a:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
    223c:	001a      	movs	r2, r3
    223e:	7853      	ldrb	r3, [r2, #1]
    2240:	09db      	lsrs	r3, r3, #7
    2242:	d1fc      	bne.n	223e <ClocksInit+0x32>
		.bit.CLKEN = 1,			/* Enable the Generic Clock */
		.bit.GEN = GENERIC_CLOCK_GENERATOR_XOSC32K, 	/* Generic Clock Generator 1 is the source */
		.bit.ID = 0x00			/* Generic Clock Multiplexer 0 (DFLL48M Reference) */
	};
	// Write these settings
	GCLK->CLKCTRL.reg = gclk_clkctrl.reg;
    2244:	4b28      	ldr	r3, [pc, #160]	; (22e8 <ClocksInit+0xdc>)
    2246:	2282      	movs	r2, #130	; 0x82
    2248:	01d2      	lsls	r2, r2, #7
    224a:	805a      	strh	r2, [r3, #2]
	// Enable the DFLL48M in open loop mode. Without this step, attempts to go into closed loop mode at 48 MHz will
	// result in Processor Reset (you'll be at the in the Reset_Handler in startup_samd21.c).
	// PCLKSR.DFLLRDY must be one before writing to the DFLL Control register
	// Note that the DFLLRDY bit represents status of register synchronization - NOT clock stability
	// (see Data Sheet 17.6.14 Synchronization for detail)
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    224c:	4a25      	ldr	r2, [pc, #148]	; (22e4 <ClocksInit+0xd8>)
    224e:	68d3      	ldr	r3, [r2, #12]
    2250:	06db      	lsls	r3, r3, #27
    2252:	d5fc      	bpl.n	224e <ClocksInit+0x42>
	SYSCTRL->DFLLCTRL.reg = (uint16_t)(SYSCTRL_DFLLCTRL_ENABLE);
    2254:	2202      	movs	r2, #2
    2256:	4b23      	ldr	r3, [pc, #140]	; (22e4 <ClocksInit+0xd8>)
    2258:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    225a:	001a      	movs	r2, r3
    225c:	68d3      	ldr	r3, [r2, #12]
    225e:	06db      	lsls	r3, r3, #27
    2260:	d5fc      	bpl.n	225c <ClocksInit+0x50>
		.bit.CSTEP = 31,		/* Coarse step - use half of the max value (63) */
		.bit.FSTEP = 511,		/* Fine step - use half of the max value (1023) */
		.bit.MUL = 1465			/* Multiplier = MAIN_CLK_FREQ (48MHz) / EXT_32K_CLK_FREQ (32768 Hz) */
	};
	// Write these settings
	SYSCTRL->DFLLMUL.reg = sysctrl_dfllmul.reg;
    2262:	4b20      	ldr	r3, [pc, #128]	; (22e4 <ClocksInit+0xd8>)
    2264:	4a22      	ldr	r2, [pc, #136]	; (22f0 <ClocksInit+0xe4>)
    2266:	62da      	str	r2, [r3, #44]	; 0x2c
	// Wait for synchronization
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2268:	001a      	movs	r2, r3
    226a:	68d3      	ldr	r3, [r2, #12]
    226c:	06db      	lsls	r3, r3, #27
    226e:	d5fc      	bpl.n	226a <ClocksInit+0x5e>
	
	// To reduce lock time, load factory calibrated values into DFLLVAL (cf. Data Sheet 17.6.7.1)
	// Location of value is defined in Data Sheet Table 10-5. NVM Software Calibration Area Mapping
	
	// Get factory calibrated value for "DFLL48M COARSE CAL" from NVM Software Calibration Area
	tempDFLL48CalibrationCoarse = *(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR;
    2270:	4b20      	ldr	r3, [pc, #128]	; (22f4 <ClocksInit+0xe8>)
	tempDFLL48CalibrationCoarse &= FUSES_DFLL48M_COARSE_CAL_Msk;
	tempDFLL48CalibrationCoarse = tempDFLL48CalibrationCoarse>>FUSES_DFLL48M_COARSE_CAL_Pos;
	// Write the coarse calibration value
	SYSCTRL->DFLLVAL.bit.COARSE = tempDFLL48CalibrationCoarse;
    2272:	681a      	ldr	r2, [r3, #0]
    2274:	491b      	ldr	r1, [pc, #108]	; (22e4 <ClocksInit+0xd8>)
    2276:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    2278:	0e92      	lsrs	r2, r2, #26
    227a:	0292      	lsls	r2, r2, #10
    227c:	481e      	ldr	r0, [pc, #120]	; (22f8 <ClocksInit+0xec>)
    227e:	4003      	ands	r3, r0
    2280:	4313      	orrs	r3, r2
    2282:	628b      	str	r3, [r1, #40]	; 0x28
	// Switch DFLL48M to Closed Loop mode and enable WAITLOCK
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2284:	000a      	movs	r2, r1
    2286:	68d3      	ldr	r3, [r2, #12]
    2288:	06db      	lsls	r3, r3, #27
    228a:	d5fc      	bpl.n	2286 <ClocksInit+0x7a>
	SYSCTRL->DFLLCTRL.reg |= (uint16_t) (SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_WAITLOCK);
    228c:	4a15      	ldr	r2, [pc, #84]	; (22e4 <ClocksInit+0xd8>)
    228e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2290:	491a      	ldr	r1, [pc, #104]	; (22fc <ClocksInit+0xf0>)
    2292:	430b      	orrs	r3, r1
    2294:	8493      	strh	r3, [r2, #36]	; 0x24
		.bit.IDC = 1,			/* Generator duty cycle is 50/50 */
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x07,		/* Generator source: DFLL48M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_MAIN			/* Generator ID: 0 */
	};
	GCLK->GENCTRL.reg = gclk_genctrl0.reg;
    2296:	4b14      	ldr	r3, [pc, #80]	; (22e8 <ClocksInit+0xdc>)
    2298:	4a19      	ldr	r2, [pc, #100]	; (2300 <ClocksInit+0xf4>)
    229a:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
    229c:	001a      	movs	r2, r3
    229e:	7853      	ldrb	r3, [r2, #1]
    22a0:	09db      	lsrs	r3, r3, #7
    22a2:	d1fc      	bne.n	229e <ClocksInit+0x92>
		.bit.PMUX = 7,			/* Peripheral Function H selected (GCLK_IO[0]) */
		.bit.PMUXEN = 1,		/* Enable peripheral Multiplexer */
		.bit.PINMASK = (uint16_t)(1 << (28-16)) /* Select the pin(s) to be configured */
	};
	// Write these settings
	PORT->Group[0].WRCONFIG.reg = port0_wrconfig.reg;
    22a4:	4b17      	ldr	r3, [pc, #92]	; (2304 <ClocksInit+0xf8>)
    22a6:	4a18      	ldr	r2, [pc, #96]	; (2308 <ClocksInit+0xfc>)
    22a8:	629a      	str	r2, [r3, #40]	; 0x28
	
	/* ----------------------------------------------------------------------------------------------
	* 7) Modify prescaler value of OSC8M to produce 8MHz output
	*/

	SYSCTRL->OSC8M.bit.PRESC = 0;		/* Prescale by 1 */
    22aa:	4b0e      	ldr	r3, [pc, #56]	; (22e4 <ClocksInit+0xd8>)
    22ac:	6a1a      	ldr	r2, [r3, #32]
    22ae:	4917      	ldr	r1, [pc, #92]	; (230c <ClocksInit+0x100>)
    22b0:	400a      	ands	r2, r1
    22b2:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;	/* Oscillator is always on if enabled */
    22b4:	6a1a      	ldr	r2, [r3, #32]
    22b6:	2180      	movs	r1, #128	; 0x80
    22b8:	438a      	bics	r2, r1
    22ba:	621a      	str	r2, [r3, #32]
	GCLK_GENDIV_Type gclk3_gendiv = {
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M		/* Apply division factor to Generator 3 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk3_gendiv.reg;
    22bc:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <ClocksInit+0xdc>)
    22be:	2204      	movs	r2, #4
    22c0:	32ff      	adds	r2, #255	; 0xff
    22c2:	609a      	str	r2, [r3, #8]
	
	// Configure Generic Clock Generator 3 with OSC8M as source
	GCLK_GENCTRL_Type gclk3_genctrl = {
    22c4:	4a12      	ldr	r2, [pc, #72]	; (2310 <ClocksInit+0x104>)
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x06,		/* Generator source: OSC8M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M			/* Generator ID: 3 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk3_genctrl.reg;
    22c6:	605a      	str	r2, [r3, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
    22c8:	001a      	movs	r2, r3
    22ca:	7853      	ldrb	r3, [r2, #1]
    22cc:	09db      	lsrs	r3, r3, #7
    22ce:	d1fc      	bne.n	22ca <ClocksInit+0xbe>
	
	/* ----------------------------------------------------------------------------------------------
	* 9) Set CPU and APBx BUS Clocks to 48MHz
	*/
	PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    22d0:	4b10      	ldr	r3, [pc, #64]	; (2314 <ClocksInit+0x108>)
    22d2:	2200      	movs	r2, #0
    22d4:	721a      	strb	r2, [r3, #8]
	PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    22d6:	725a      	strb	r2, [r3, #9]
	PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    22d8:	729a      	strb	r2, [r3, #10]
	PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    22da:	72da      	strb	r2, [r3, #11]
	
    22dc:	4770      	bx	lr
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	41004000 	.word	0x41004000
    22e4:	40000800 	.word	0x40000800
    22e8:	40000c00 	.word	0x40000c00
    22ec:	00030501 	.word	0x00030501
    22f0:	7dff05b9 	.word	0x7dff05b9
    22f4:	00806024 	.word	0x00806024
    22f8:	ffff03ff 	.word	0xffff03ff
    22fc:	00000804 	.word	0x00000804
    2300:	000b0700 	.word	0x000b0700
    2304:	41004400 	.word	0x41004400
    2308:	d7011000 	.word	0xd7011000
    230c:	fffffcff 	.word	0xfffffcff
    2310:	00030603 	.word	0x00030603
    2314:	40000400 	.word	0x40000400

00002318 <AppInit>:
		
	}
} // main()


void AppInit(void){
    2318:	b510      	push	{r4, lr}
	
	ClocksInit();
    231a:	4b0c      	ldr	r3, [pc, #48]	; (234c <AppInit+0x34>)
    231c:	4798      	blx	r3
	
	// Assign the LED0 pin as OUTPUT
	PORT->Group[LED0_PORT].DIRSET.reg = LED0_PIN_MASK;
    231e:	4b0c      	ldr	r3, [pc, #48]	; (2350 <AppInit+0x38>)
    2320:	2280      	movs	r2, #128	; 0x80
    2322:	0192      	lsls	r2, r2, #6
    2324:	609a      	str	r2, [r3, #8]
	// Set the LED0 pin level, i.e. put to 3.3V -> this light off the LED
	PORT->Group[LED0_PORT].OUTCLR.reg = LED0_PIN_MASK;
    2326:	615a      	str	r2, [r3, #20]
	PORT->Group[LED0_PORT].DIRSET.reg = PORT_PA12;
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	0152      	lsls	r2, r2, #5
    232c:	609a      	str	r2, [r3, #8]
	// Set the LED0 pin level, i.e. put to 3.3V -> this light off the LED
	PORT->Group[LED0_PORT].OUTSET.reg = PORT_PA12;
    232e:	619a      	str	r2, [r3, #24]
	
	PORT->Group[PORTA].DIRCLR.reg= PORT_PA14;
    2330:	2280      	movs	r2, #128	; 0x80
    2332:	01d2      	lsls	r2, r2, #7
    2334:	605a      	str	r2, [r3, #4]
	PORT->Group[PORTA].OUTSET.reg =PORT_PA14;
    2336:	619a      	str	r2, [r3, #24]
	PORT->Group[PORTA].PINCFG[14].bit.PULLEN=1;
    2338:	224e      	movs	r2, #78	; 0x4e
    233a:	5c99      	ldrb	r1, [r3, r2]
    233c:	2004      	movs	r0, #4
    233e:	4301      	orrs	r1, r0
    2340:	5499      	strb	r1, [r3, r2]
	PORT->Group[PORTA].PINCFG[14].bit.INEN=1;
    2342:	5c99      	ldrb	r1, [r3, r2]
    2344:	2002      	movs	r0, #2
    2346:	4301      	orrs	r1, r0
    2348:	5499      	strb	r1, [r3, r2]
} // AppInit()
    234a:	bd10      	pop	{r4, pc}
    234c:	0000220d 	.word	0x0000220d
    2350:	41004400 	.word	0x41004400

00002354 <main>:
int main(void){
    2354:	b510      	push	{r4, lr}
	SystemInit();
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <main+0x2c>)
    2358:	4798      	blx	r3
	AppInit();
    235a:	4b0a      	ldr	r3, [pc, #40]	; (2384 <main+0x30>)
    235c:	4798      	blx	r3
		if(!(PORT->Group[PORTA].IN.reg & PORT_PA14)){
    235e:	4b0a      	ldr	r3, [pc, #40]	; (2388 <main+0x34>)
    2360:	2480      	movs	r4, #128	; 0x80
    2362:	01e4      	lsls	r4, r4, #7
			PORT->Group[LED0_PORT].OUTCLR.reg = LED0_PIN_MASK;
    2364:	2080      	movs	r0, #128	; 0x80
    2366:	0180      	lsls	r0, r0, #6
			PORT->Group[LED0_PORT].OUTSET.reg = PORT_PA12;
    2368:	2180      	movs	r1, #128	; 0x80
    236a:	0149      	lsls	r1, r1, #5
    236c:	e001      	b.n	2372 <main+0x1e>
			PORT->Group[LED0_PORT].OUTCLR.reg = LED0_PIN_MASK;
    236e:	6158      	str	r0, [r3, #20]
			PORT->Group[LED0_PORT].OUTSET.reg = PORT_PA12;
    2370:	6199      	str	r1, [r3, #24]
		if(!(PORT->Group[PORTA].IN.reg & PORT_PA14)){
    2372:	6a1a      	ldr	r2, [r3, #32]
    2374:	4222      	tst	r2, r4
    2376:	d1fa      	bne.n	236e <main+0x1a>
			PORT->Group[LED0_PORT].OUTSET.reg = LED0_PIN_MASK;
    2378:	6198      	str	r0, [r3, #24]
				PORT->Group[LED0_PORT].OUTCLR.reg = PORT_PA12;
    237a:	6159      	str	r1, [r3, #20]
    237c:	e7f9      	b.n	2372 <main+0x1e>
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	000021fd 	.word	0x000021fd
    2384:	00002319 	.word	0x00002319
    2388:	41004400 	.word	0x41004400

0000238c <__libc_init_array>:
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	4e0d      	ldr	r6, [pc, #52]	; (23c4 <__libc_init_array+0x38>)
    2390:	4d0d      	ldr	r5, [pc, #52]	; (23c8 <__libc_init_array+0x3c>)
    2392:	2400      	movs	r4, #0
    2394:	1bad      	subs	r5, r5, r6
    2396:	10ad      	asrs	r5, r5, #2
    2398:	d005      	beq.n	23a6 <__libc_init_array+0x1a>
    239a:	00a3      	lsls	r3, r4, #2
    239c:	58f3      	ldr	r3, [r6, r3]
    239e:	3401      	adds	r4, #1
    23a0:	4798      	blx	r3
    23a2:	42a5      	cmp	r5, r4
    23a4:	d1f9      	bne.n	239a <__libc_init_array+0xe>
    23a6:	f000 f8c3 	bl	2530 <_init>
    23aa:	4e08      	ldr	r6, [pc, #32]	; (23cc <__libc_init_array+0x40>)
    23ac:	4d08      	ldr	r5, [pc, #32]	; (23d0 <__libc_init_array+0x44>)
    23ae:	2400      	movs	r4, #0
    23b0:	1bad      	subs	r5, r5, r6
    23b2:	10ad      	asrs	r5, r5, #2
    23b4:	d005      	beq.n	23c2 <__libc_init_array+0x36>
    23b6:	00a3      	lsls	r3, r4, #2
    23b8:	58f3      	ldr	r3, [r6, r3]
    23ba:	3401      	adds	r4, #1
    23bc:	4798      	blx	r3
    23be:	42a5      	cmp	r5, r4
    23c0:	d1f9      	bne.n	23b6 <__libc_init_array+0x2a>
    23c2:	bd70      	pop	{r4, r5, r6, pc}
    23c4:	0000253c 	.word	0x0000253c
    23c8:	0000253c 	.word	0x0000253c
    23cc:	0000253c 	.word	0x0000253c
    23d0:	00002544 	.word	0x00002544

000023d4 <register_fini>:
    23d4:	4b03      	ldr	r3, [pc, #12]	; (23e4 <register_fini+0x10>)
    23d6:	b510      	push	{r4, lr}
    23d8:	2b00      	cmp	r3, #0
    23da:	d002      	beq.n	23e2 <register_fini+0xe>
    23dc:	4802      	ldr	r0, [pc, #8]	; (23e8 <register_fini+0x14>)
    23de:	f000 f805 	bl	23ec <atexit>
    23e2:	bd10      	pop	{r4, pc}
    23e4:	00000000 	.word	0x00000000
    23e8:	000023fd 	.word	0x000023fd

000023ec <atexit>:
    23ec:	b510      	push	{r4, lr}
    23ee:	0001      	movs	r1, r0
    23f0:	2300      	movs	r3, #0
    23f2:	2200      	movs	r2, #0
    23f4:	2000      	movs	r0, #0
    23f6:	f000 f81f 	bl	2438 <__register_exitproc>
    23fa:	bd10      	pop	{r4, pc}

000023fc <__libc_fini_array>:
    23fc:	b570      	push	{r4, r5, r6, lr}
    23fe:	4b09      	ldr	r3, [pc, #36]	; (2424 <__libc_fini_array+0x28>)
    2400:	4c09      	ldr	r4, [pc, #36]	; (2428 <__libc_fini_array+0x2c>)
    2402:	1ae4      	subs	r4, r4, r3
    2404:	10a4      	asrs	r4, r4, #2
    2406:	d009      	beq.n	241c <__libc_fini_array+0x20>
    2408:	4a08      	ldr	r2, [pc, #32]	; (242c <__libc_fini_array+0x30>)
    240a:	18a5      	adds	r5, r4, r2
    240c:	00ad      	lsls	r5, r5, #2
    240e:	18ed      	adds	r5, r5, r3
    2410:	682b      	ldr	r3, [r5, #0]
    2412:	3c01      	subs	r4, #1
    2414:	4798      	blx	r3
    2416:	3d04      	subs	r5, #4
    2418:	2c00      	cmp	r4, #0
    241a:	d1f9      	bne.n	2410 <__libc_fini_array+0x14>
    241c:	f000 f892 	bl	2544 <_fini>
    2420:	bd70      	pop	{r4, r5, r6, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	00002550 	.word	0x00002550
    2428:	00002554 	.word	0x00002554
    242c:	3fffffff 	.word	0x3fffffff

00002430 <__retarget_lock_acquire_recursive>:
    2430:	4770      	bx	lr
    2432:	46c0      	nop			; (mov r8, r8)

00002434 <__retarget_lock_release_recursive>:
    2434:	4770      	bx	lr
    2436:	46c0      	nop			; (mov r8, r8)

00002438 <__register_exitproc>:
    2438:	b5f0      	push	{r4, r5, r6, r7, lr}
    243a:	464e      	mov	r6, r9
    243c:	4645      	mov	r5, r8
    243e:	46de      	mov	lr, fp
    2440:	4657      	mov	r7, sl
    2442:	b5e0      	push	{r5, r6, r7, lr}
    2444:	4d36      	ldr	r5, [pc, #216]	; (2520 <__register_exitproc+0xe8>)
    2446:	b083      	sub	sp, #12
    2448:	0006      	movs	r6, r0
    244a:	6828      	ldr	r0, [r5, #0]
    244c:	4698      	mov	r8, r3
    244e:	000f      	movs	r7, r1
    2450:	4691      	mov	r9, r2
    2452:	f7ff ffed 	bl	2430 <__retarget_lock_acquire_recursive>
    2456:	4b33      	ldr	r3, [pc, #204]	; (2524 <__register_exitproc+0xec>)
    2458:	681c      	ldr	r4, [r3, #0]
    245a:	23a4      	movs	r3, #164	; 0xa4
    245c:	005b      	lsls	r3, r3, #1
    245e:	58e0      	ldr	r0, [r4, r3]
    2460:	2800      	cmp	r0, #0
    2462:	d052      	beq.n	250a <__register_exitproc+0xd2>
    2464:	6843      	ldr	r3, [r0, #4]
    2466:	2b1f      	cmp	r3, #31
    2468:	dc13      	bgt.n	2492 <__register_exitproc+0x5a>
    246a:	1c5a      	adds	r2, r3, #1
    246c:	9201      	str	r2, [sp, #4]
    246e:	2e00      	cmp	r6, #0
    2470:	d128      	bne.n	24c4 <__register_exitproc+0x8c>
    2472:	9a01      	ldr	r2, [sp, #4]
    2474:	3302      	adds	r3, #2
    2476:	009b      	lsls	r3, r3, #2
    2478:	6042      	str	r2, [r0, #4]
    247a:	501f      	str	r7, [r3, r0]
    247c:	6828      	ldr	r0, [r5, #0]
    247e:	f7ff ffd9 	bl	2434 <__retarget_lock_release_recursive>
    2482:	2000      	movs	r0, #0
    2484:	b003      	add	sp, #12
    2486:	bc3c      	pop	{r2, r3, r4, r5}
    2488:	4690      	mov	r8, r2
    248a:	4699      	mov	r9, r3
    248c:	46a2      	mov	sl, r4
    248e:	46ab      	mov	fp, r5
    2490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2492:	4b25      	ldr	r3, [pc, #148]	; (2528 <__register_exitproc+0xf0>)
    2494:	2b00      	cmp	r3, #0
    2496:	d03d      	beq.n	2514 <__register_exitproc+0xdc>
    2498:	20c8      	movs	r0, #200	; 0xc8
    249a:	0040      	lsls	r0, r0, #1
    249c:	e000      	b.n	24a0 <__register_exitproc+0x68>
    249e:	bf00      	nop
    24a0:	2800      	cmp	r0, #0
    24a2:	d037      	beq.n	2514 <__register_exitproc+0xdc>
    24a4:	22a4      	movs	r2, #164	; 0xa4
    24a6:	2300      	movs	r3, #0
    24a8:	0052      	lsls	r2, r2, #1
    24aa:	58a1      	ldr	r1, [r4, r2]
    24ac:	6043      	str	r3, [r0, #4]
    24ae:	6001      	str	r1, [r0, #0]
    24b0:	50a0      	str	r0, [r4, r2]
    24b2:	3240      	adds	r2, #64	; 0x40
    24b4:	5083      	str	r3, [r0, r2]
    24b6:	3204      	adds	r2, #4
    24b8:	5083      	str	r3, [r0, r2]
    24ba:	3301      	adds	r3, #1
    24bc:	9301      	str	r3, [sp, #4]
    24be:	2300      	movs	r3, #0
    24c0:	2e00      	cmp	r6, #0
    24c2:	d0d6      	beq.n	2472 <__register_exitproc+0x3a>
    24c4:	009a      	lsls	r2, r3, #2
    24c6:	4692      	mov	sl, r2
    24c8:	4482      	add	sl, r0
    24ca:	464a      	mov	r2, r9
    24cc:	2188      	movs	r1, #136	; 0x88
    24ce:	4654      	mov	r4, sl
    24d0:	5062      	str	r2, [r4, r1]
    24d2:	22c4      	movs	r2, #196	; 0xc4
    24d4:	0052      	lsls	r2, r2, #1
    24d6:	4691      	mov	r9, r2
    24d8:	4481      	add	r9, r0
    24da:	464a      	mov	r2, r9
    24dc:	3987      	subs	r1, #135	; 0x87
    24de:	4099      	lsls	r1, r3
    24e0:	6812      	ldr	r2, [r2, #0]
    24e2:	468b      	mov	fp, r1
    24e4:	430a      	orrs	r2, r1
    24e6:	4694      	mov	ip, r2
    24e8:	464a      	mov	r2, r9
    24ea:	4661      	mov	r1, ip
    24ec:	6011      	str	r1, [r2, #0]
    24ee:	2284      	movs	r2, #132	; 0x84
    24f0:	4641      	mov	r1, r8
    24f2:	0052      	lsls	r2, r2, #1
    24f4:	50a1      	str	r1, [r4, r2]
    24f6:	2e02      	cmp	r6, #2
    24f8:	d1bb      	bne.n	2472 <__register_exitproc+0x3a>
    24fa:	0002      	movs	r2, r0
    24fc:	465c      	mov	r4, fp
    24fe:	328d      	adds	r2, #141	; 0x8d
    2500:	32ff      	adds	r2, #255	; 0xff
    2502:	6811      	ldr	r1, [r2, #0]
    2504:	430c      	orrs	r4, r1
    2506:	6014      	str	r4, [r2, #0]
    2508:	e7b3      	b.n	2472 <__register_exitproc+0x3a>
    250a:	0020      	movs	r0, r4
    250c:	304d      	adds	r0, #77	; 0x4d
    250e:	30ff      	adds	r0, #255	; 0xff
    2510:	50e0      	str	r0, [r4, r3]
    2512:	e7a7      	b.n	2464 <__register_exitproc+0x2c>
    2514:	6828      	ldr	r0, [r5, #0]
    2516:	f7ff ff8d 	bl	2434 <__retarget_lock_release_recursive>
    251a:	2001      	movs	r0, #1
    251c:	4240      	negs	r0, r0
    251e:	e7b1      	b.n	2484 <__register_exitproc+0x4c>
    2520:	20000430 	.word	0x20000430
    2524:	0000252c 	.word	0x0000252c
    2528:	00000000 	.word	0x00000000

0000252c <_global_impure_ptr>:
    252c:	20000008                                ... 

00002530 <_init>:
    2530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2536:	bc08      	pop	{r3}
    2538:	469e      	mov	lr, r3
    253a:	4770      	bx	lr

0000253c <__init_array_start>:
    253c:	000023d5 	.word	0x000023d5

00002540 <__frame_dummy_init_array_entry>:
    2540:	000020dd                                . ..

00002544 <_fini>:
    2544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	bcf8      	pop	{r3, r4, r5, r6, r7}
    254a:	bc08      	pop	{r3}
    254c:	469e      	mov	lr, r3
    254e:	4770      	bx	lr

00002550 <__fini_array_start>:
    2550:	000020b5 	.word	0x000020b5
